y <- c(1,1,4,5,7,7)
df_0 <- data.frame(x,y)
df_0_sc <- as.data.frame(scale(df_0))
edist_mat <- dist(df_0_sc, method = 'euclidean')
hclust_com <- hclust(edist_mat, method = 'complete')
plot(hclust_com)
x <- c(1,4,3,4,3,5)
y <- c(1,1,4,5,7,7)
df_0 <- data.frame(x,y)
#df_0_sc <- as.data.frame(scale(df_0))
edist_mat <- dist(df_0, method = 'euclidean')
hclust_com <- hclust(edist_mat, method = 'complete')
plot(hclust_com)
x <- c(1,4,3,4,3,5)
y <- c(1,1,4,5,7,7)
df_0 <- data.frame(x,y)
#df_0_sc <- as.data.frame(scale(df_0))
edist_mat <- dist(df_0, method = 'euclidean')
hclust_com <- hclust(edist_mat, method = 'complete')
plot(hclust_com)
rect.hclust(hclust_com , k = 3, border = 2:6)
abline(h = 3, col = 'red')
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(magrittr)
library(ggplot2)
library(plotly)
library(data.table)
library(ggbiplot)
library(tidyr)
library(cowplot)
library(cluster)
library(GGally)
library(corrgram)
library(psych)
library(factoextra)
library(NbClust)
#Applying fix for fviz_nbclust functions
fviz_nbclust <- function (x, FUNcluster = NULL, method = c("silhouette", "wss",
"gap_stat"), diss = NULL, k.max = 10, nboot = 100, verbose = interactive(),
barfill = "steelblue", barcolor = "steelblue", linecolor = "steelblue",
print.summary = TRUE, ...)
{
set.seed(72)
if (k.max < 2)
stop("k.max must bet > = 2")
method = match.arg(method)
if (!inherits(x, c("data.frame", "matrix")) & !("Best.nc" %in%
names(x)))
stop("x should be an object of class matrix/data.frame or ",
"an object created by the function NbClust() [NbClust package].")
if (inherits(x, "list") & "Best.nc" %in% names(x)) {
best_nc <- x$Best.nc
if (any(class(best_nc) == "numeric") )
print(best_nc)
else if (any(class(best_nc) == "matrix") )
.viz_NbClust(x, print.summary, barfill, barcolor)
}
else if (is.null(FUNcluster))
stop("The argument FUNcluster is required. ", "Possible values are kmeans, pam, hcut, clara, ...")
else if (!is.function(FUNcluster)) {
stop("The argument FUNcluster should be a function. ",
"Check if you're not overriding the specified function name somewhere.")
}
else if (method %in% c("silhouette", "wss")) {
if (is.data.frame(x))
x <- as.matrix(x)
if (is.null(diss))
diss <- stats::dist(x)
v <- rep(0, k.max)
if (method == "silhouette") {
for (i in 2:k.max) {
clust <- FUNcluster(x, i, ...)
v[i] <- .get_ave_sil_width(diss, clust$cluster)
}
}
else if (method == "wss") {
for (i in 1:k.max) {
clust <- FUNcluster(x, i, ...)
v[i] <- .get_withinSS(diss, clust$cluster)
}
}
df <- data.frame(clusters = as.factor(1:k.max), y = v,
stringsAsFactors = TRUE)
ylab <- "Total Within Sum of Square"
if (method == "silhouette")
ylab <- "Average silhouette width"
p <- ggpubr::ggline(df, x = "clusters", y = "y", group = 1,
color = linecolor, ylab = ylab, xlab = "Number of clusters k",
main = "Optimal number of clusters")
if (method == "silhouette")
p <- p + geom_vline(xintercept = which.max(v), linetype = 2,
color = linecolor)
return(p)
}
else if (method == "gap_stat") {
extra_args <- list(...)
gap_stat <- cluster::clusGap(x, FUNcluster, K.max = k.max,
B = nboot, verbose = verbose, ...)
if (!is.null(extra_args$maxSE))
maxSE <- extra_args$maxSE
else maxSE <- list(method = "firstSEmax", SE.factor = 1)
p <- fviz_gap_stat(gap_stat, linecolor = linecolor,
maxSE = maxSE)
return(p)
}
}
.viz_NbClust <- function (x, print.summary = TRUE, barfill = "steelblue",
barcolor = "steelblue")
{
best_nc <- x$Best.nc
if (any(class(best_nc) == "numeric") )
print(best_nc)
else if (any(class(best_nc) == "matrix") ) {
best_nc <- as.data.frame(t(best_nc), stringsAsFactors = TRUE)
best_nc$Number_clusters <- as.factor(best_nc$Number_clusters)
if (print.summary) {
ss <- summary(best_nc$Number_clusters)
cat("Among all indices: \n===================\n")
for (i in 1:length(ss)) {
cat("*", ss[i], "proposed ", names(ss)[i],
"as the best number of clusters\n")
}
cat("\nConclusion\n=========================\n")
cat("* According to the majority rule, the best number of clusters is ",
names(which.max(ss)), ".\n\n")
}
df <- data.frame(Number_clusters = names(ss), freq = ss,
stringsAsFactors = TRUE)
p <- ggpubr::ggbarplot(df, x = "Number_clusters",
y = "freq", fill = barfill, color = barcolor) +
labs(x = "Number of clusters k", y = "Frequency among all indices",
title = paste0("Optimal number of clusters - k = ",
names(which.max(ss))))
return(p)
}
}
# assign them to the factoextra namespace
environment(fviz_nbclust) <- asNamespace("factoextra")
assignInNamespace("fviz_nbclust",fviz_nbclust,"factoextra")
environment(.viz_NbClust) <- asNamespace("factoextra")
assignInNamespace(".viz_NbClust",.viz_NbClust,"factoextra")
km.out <- kmeans(data, 4, nstart = 20)
original_data <- cbind(data, clusters= km.out$cluster)
original_data$clusters <- as.factor(original_data$clusters)
head(original_data)
km.out <- kmeans(data, 3, nstart = 20)
original_data <- cbind(data, clusters= km.out$cluster)
original_data$clusters <- as.factor(original_data$clusters)
head(original_data)
km.out <- kmeans(data, 3, nstart = 20)
original_data <- cbind(data, clusters= km.out$cluster)
original_data$clusters <- as.factor(original_data$clusters)
head(original_data)
plot_ly(original_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length compared to clusters")
char_data <- cbind(data, clusters= km_3.out$cluster)
df_scale$Cluster <- km_3$cluster
head(df_scale)
describeBy(df_scale, group="Cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~width ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
plot_ly(char_data, y =~groove ,color = ~clusters, type = "box" )  %>% layout(title = "Groove in each cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
plot_ly(char_data, y =~area ,color = ~clusters, type = "box" )  %>% layout(title = "Groove in each cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
plot_ly(char_data, y =~width ,color = ~clusters, type = "box" )  %>% layout(title = "Width in each cluster")
plot_ly(char_data, y =~area ,color = ~clusters, type = "box" )  %>% layout(title = "Area in each cluster")
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(1)
clus <- kmeans(df,2)
clus$cluster
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(768)
clus <- kmeans(df,2)
clus$cluster
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(1)
clus <- kmeans(df,2)
clus$cluster
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
#set.seed(1)
clus <- kmeans(df,2)
clus$cluster
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(17121827)
clus <- kmeans(df,2)
clus$cluster
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(1)
clus <- kmeans(df,2)
clus$cluster
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(1)
clus <- kmeans(df,2)
clus$cluster
print(clus$centers)
# cluster1: 1,2
# cluster2: 3,4,5
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(1)
clus <- kmeans(df,2)
# cluster1: 1,2
# cluster2: 3,4,5
clus$cluster
print(clus$centers)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(magrittr)
library(ggplot2)
library(plotly)
library(data.table)
library(ggbiplot)
library(tidyr)
library(cowplot)
library(cluster)
library(GGally)
library(corrgram)
library(psych)
library(factoextra)
library(NbClust)
#Applying fix for fviz_nbclust functions
fviz_nbclust <- function (x, FUNcluster = NULL, method = c("silhouette", "wss",
"gap_stat"), diss = NULL, k.max = 10, nboot = 100, verbose = interactive(),
barfill = "steelblue", barcolor = "steelblue", linecolor = "steelblue",
print.summary = TRUE, ...)
{
set.seed(72)
if (k.max < 2)
stop("k.max must bet > = 2")
method = match.arg(method)
if (!inherits(x, c("data.frame", "matrix")) & !("Best.nc" %in%
names(x)))
stop("x should be an object of class matrix/data.frame or ",
"an object created by the function NbClust() [NbClust package].")
if (inherits(x, "list") & "Best.nc" %in% names(x)) {
best_nc <- x$Best.nc
if (any(class(best_nc) == "numeric") )
print(best_nc)
else if (any(class(best_nc) == "matrix") )
.viz_NbClust(x, print.summary, barfill, barcolor)
}
else if (is.null(FUNcluster))
stop("The argument FUNcluster is required. ", "Possible values are kmeans, pam, hcut, clara, ...")
else if (!is.function(FUNcluster)) {
stop("The argument FUNcluster should be a function. ",
"Check if you're not overriding the specified function name somewhere.")
}
else if (method %in% c("silhouette", "wss")) {
if (is.data.frame(x))
x <- as.matrix(x)
if (is.null(diss))
diss <- stats::dist(x)
v <- rep(0, k.max)
if (method == "silhouette") {
for (i in 2:k.max) {
clust <- FUNcluster(x, i, ...)
v[i] <- .get_ave_sil_width(diss, clust$cluster)
}
}
else if (method == "wss") {
for (i in 1:k.max) {
clust <- FUNcluster(x, i, ...)
v[i] <- .get_withinSS(diss, clust$cluster)
}
}
df <- data.frame(clusters = as.factor(1:k.max), y = v,
stringsAsFactors = TRUE)
ylab <- "Total Within Sum of Square"
if (method == "silhouette")
ylab <- "Average silhouette width"
p <- ggpubr::ggline(df, x = "clusters", y = "y", group = 1,
color = linecolor, ylab = ylab, xlab = "Number of clusters k",
main = "Optimal number of clusters")
if (method == "silhouette")
p <- p + geom_vline(xintercept = which.max(v), linetype = 2,
color = linecolor)
return(p)
}
else if (method == "gap_stat") {
extra_args <- list(...)
gap_stat <- cluster::clusGap(x, FUNcluster, K.max = k.max,
B = nboot, verbose = verbose, ...)
if (!is.null(extra_args$maxSE))
maxSE <- extra_args$maxSE
else maxSE <- list(method = "firstSEmax", SE.factor = 1)
p <- fviz_gap_stat(gap_stat, linecolor = linecolor,
maxSE = maxSE)
return(p)
}
}
.viz_NbClust <- function (x, print.summary = TRUE, barfill = "steelblue",
barcolor = "steelblue")
{
best_nc <- x$Best.nc
if (any(class(best_nc) == "numeric") )
print(best_nc)
else if (any(class(best_nc) == "matrix") ) {
best_nc <- as.data.frame(t(best_nc), stringsAsFactors = TRUE)
best_nc$Number_clusters <- as.factor(best_nc$Number_clusters)
if (print.summary) {
ss <- summary(best_nc$Number_clusters)
cat("Among all indices: \n===================\n")
for (i in 1:length(ss)) {
cat("*", ss[i], "proposed ", names(ss)[i],
"as the best number of clusters\n")
}
cat("\nConclusion\n=========================\n")
cat("* According to the majority rule, the best number of clusters is ",
names(which.max(ss)), ".\n\n")
}
df <- data.frame(Number_clusters = names(ss), freq = ss,
stringsAsFactors = TRUE)
p <- ggpubr::ggbarplot(df, x = "Number_clusters",
y = "freq", fill = barfill, color = barcolor) +
labs(x = "Number of clusters k", y = "Frequency among all indices",
title = paste0("Optimal number of clusters - k = ",
names(which.max(ss))))
return(p)
}
}
# assign them to the factoextra namespace
environment(fviz_nbclust) <- asNamespace("factoextra")
assignInNamespace("fviz_nbclust",fviz_nbclust,"factoextra")
environment(.viz_NbClust) <- asNamespace("factoextra")
assignInNamespace(".viz_NbClust",.viz_NbClust,"factoextra")
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
t(df) %>% knitr::kable(col.names = 1:6)
set.seed(72)
sample(1:6,6,replace = FALSE) %>% t() %>% knitr::kable(col.names = NA)
df <- tribble(
~x, ~y,
1, 1,
4, 1,
3, 4,
4, 5,
3, 7,
5, 7
)
set.seed(1)
clus <- kmeans(df,2)
# cluster1: 1,2
# cluster2: 3,4,5
clus$cluster
print(clus$centers)
x <- c(1,4,3,4,3,5)
y <- c(1,1,4,5,7,7)
df_0 <- data.frame(x,y)
#df_0_sc <- as.data.frame(scale(df_0))
edist_mat <- dist(df_0, method = 'euclidean')
hclust_com <- hclust(edist_mat, method = 'complete')
plot(hclust_com)
rect.hclust(hclust_com , k = 3, border = 2:6)
abline(h = 3, col = 'red')
# read dataset
df = fread("seeds.csv",stringsAsFactors = FALSE)
print(c("na values:",sum(is.na(df))))
print(c("null values:",sum(is.null(df))))
head(df)
summary(df)
# Examine dataset, for example by plotting it with GGally:ggpairs
data<-dplyr::select(df,length,width,asymmetry,groove,area,perimeter,compactness)
ggpairs(data)
df_scale <- as.data.frame(scale(df))
df_scale
pc_out <- prcomp(df_scale)
pc_out
#screeplot(pc_out, type = "line", main = "Scree plot")
exp_var = 100 * pc_out$sdev^2 / sum(pc_out$sdev^2)
print(exp_var)
# Scree plot
plot(exp_var, xlab = "Principal Components",
ylab = "Explained variance",
type = "b")
ggplotly(ggbiplot(pc_out,scale=1))
#elbow method
#compute from k=2 to k=20
#k.max <- 20
#data <- df_scale
#wss <- sapply(1:k.max,
#              function(k){kmeans(data, k, nstart=50,iter.max = 20 )$tot.withinss})
#wss
#plot(1:k.max, wss,
#     type="b", pch = 19, frame = FALSE,
#     xlab="Number of clusters K",
#     ylab="Total within-clusters sum of squares")
fviz_nbclust(df_scale, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
#Gap statistics
#gap_kmeans <- clusGap(df_scale, kmeans, nstart = 20, K.max = 10, B = 100)
#plot(gap_kmeans, main = "Gap Statistic: kmeans")
set.seed(72)
fviz_nbclust(df_scale, kmeans, nstart = 25,  method = "gap_stat", nboot = 50)+
labs(subtitle = "Gap statistic method")
#silhouette analysis
set.seed(72)
fviz_nbclust(df_scale, kmeans, method='silhouette')+
labs(subtitle = "Silhouette method")
library("NbClust")
nb <- NbClust(df_scale, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans")
fviz_nbclust(nb)
km_3 <- kmeans(df_scale, 3, nstart = 25)
fviz_cluster(km_3, data = df_scale) + ggtitle("k=3")
df_scale$Cluster <- km_3$cluster
head(df_scale)
describeBy(df_scale, group="Cluster")
char_data <- cbind(data, clusters= km_3$cluster)
char_data$clusters <- as.factor(char_data$clusters)
plot_ly(char_data, y =~length ,color = ~clusters, type = "box" )  %>% layout(title = "Length in each cluster")
plot_ly(char_data, y =~width ,color = ~clusters, type = "box" )  %>% layout(title = "Width in each cluster")
plot_ly(char_data, y =~area ,color = ~clusters, type = "box" )  %>% layout(title = "Area in each cluster")
