df %>% model(classical_decomposition(log(Cost), type='m')) %>% components() %>% autoplot()
# Auto Box-Cox
# log if lambda is zero
df %>% features(Cost, features = guerrero)
plot_grid(
autoplot(df,Cost),
autoplot(df,box_cox(Cost,0.272)),
autoplot(df,log(Cost)),
ncol=3)
# fit
fit <- df %>%
model(
Mean = MEAN(Cost),
Naive = NAIVE(Cost),
Seasonal_Naive = SNAIVE(Cost),
Drift = RW(Cost ~ drift())
)
accuracy(fit)
# forecast next year (in training set)
fc <- fit %>% forecast(h = 36)
# plot forecasts and actual data
fc %>% autoplot(df_whole,level = NULL)
# Calculate accuracy
accuracy(fc,df_whole)
# forecast next year (in training set)
fc <- fit %>% forecast(h = 36)
#plot forecasts and actual data
fc %>% autoplot(df_whole,level = 80)
fc %>% autoplot(df_whole,level = 80) + facet_wrap(~.model)
gg_tsresiduals(fit %>% select(Drift))
gg_tsresiduals(fit %>% select(Seasonal_Naive))
# lag=10 for non-seasonal data,
# lag=2m for seasonal data (where m is seasonal period).
augment(fit) %>%  features(.resid, ljung_box, lag=24, dof=1)
# fit
fit <- df %>%
model(
Mean = MEAN(log(Cost)),
Naive = NAIVE(log(Cost)),
Seasonal_Naive = SNAIVE(log(Cost)),
Drift = RW(log(Cost) ~ drift())
)
accuracy(fit)
# forecast next year (in training set)
fc <- fit %>% forecast(h = 36)
#plot forecasts and actual data
fc %>% autoplot(df_whole,level = 80)
fc %>% autoplot(df_whole,level = 80, point_forecast = lst(mean, median))
fc %>% autoplot(df_whole,level = 80) + facet_wrap(~.model)
fc %>% hilo(Cost,level = 95) %>%
unpack_hilo(`95%`)
gg_tsresiduals(fit %>% select(Drift))
gg_tsresiduals(fit %>% select(Seasonal_Naive))
# lag=10 for non-seasonal data,
# lag=2m for seasonal data (where m is seasonal period).
augment(fit) %>%  features(.innov, ljung_box, lag=24, dof=1)
df %>% model(STL(log(Cost))) %>% components() %>% autoplot()
fit <- df %>%
model(
ets_auto = ETS(log(Cost)),
ets = ETS(log(Cost) ~ error("A") + trend("A") + season("A"))
)
accuracy(fit)
report(fit)
report(fit[1])
fit <- fit %>% select(ets)
fc <- fit %>% forecast(h = "3 years")
fc %>% autoplot(df_whole,level = 90)
accuracy(fc,df_whole)
gg_tsresiduals(fit)
# lag=10 for non-seasonal data,
# lag=2m for seasonal data (where m is seasonal period).
augment(fit) %>%  features(.innov, ljung_box, lag=24, dof=17)
gg_tsdisplay(df, Cost, plot_type='partial')
# seasonal?
gg_tsdisplay(df, difference(Cost), plot_type='partial')
df %>%
features(Cost, unitroot_kpss)
df %>% features(Cost, unitroot_nsdiffs)
df %>% features(log(Cost), unitroot_nsdiffs)
df %>% features( difference(log(Cost), lag=12), unitroot_ndiffs)
gg_tsdisplay(df, difference(log(Cost), lag=12), plot_type='partial')
fit <- df %>%
model(
arima_auto = ARIMA(log(Cost)),
arima = ARIMA(log(Cost)~0+pdq(3,0,3)+PDQ(1,1,0))
)
accuracy(fit)
report(fit[1])
report(fit[2])
fc <- fit %>% forecast(h = "3 year")
fc %>% autoplot(df_whole,level = 80)
accuracy(fc,df_whole)
gg_tsresiduals(fit %>% select(arima_auto))
# lag=10 for non-seasonal data,
# lag=2m for seasonal data (where m is seasonal period).
augment(fit %>% select(arima_auto)) %>%  features(.innov, ljung_box, lag=24, dof=7)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(3,0,3)+PDQ(1,1,0))
)
accuracy(fit)
report(fit[1])
report(fit[2])
fc <- fit %>% forecast(h = "2 year")
fc %>% autoplot(df_whole,level = 80)
gg_tsdisplay(df_train, sale, plot_type='partial')
gg_tsdisplay(df_train, difference(sale), plot_type='partial')
df_train %>%
features(sale, unitroot_kpss)
df_train %>% features(sale, unitroot_nsdiffs)
df_train %>% features(log(sale), unitroot_nsdiffs)
df %>% features( difference(log(Cost), lag=12), unitroot_ndiffs)
df %>% features( difference(log(sale), lag=12), unitroot_ndiffs)
gg_tsdisplay(df_train, sale, plot_type='partial')
gg_tsdisplay(df_train, difference(sale), plot_type='partial')
df_train %>%
features(sale, unitroot_kpss)
df_train %>% features(sale, unitroot_nsdiffs)
df_train %>% features(log(sale), unitroot_nsdiffs)
df_train %>% features( difference(log(sale), lag=12), unitroot_ndiffs)
gg_tsdisplay(df)train, difference(log(sale), lag=12), plot_type='partial')
gg_tsdisplay(df_train), difference(log(sale), lag=12), plot_type='partial')
gg_tsdisplay(df_train, difference(log(sale), lag=12), plot_type='partial')
df_train %>% acf(sale)
acf(df_train$sale)
pacf(df_train$sale)
adf(df_train$sale)
adf.test(df_train$sale)
Library(tseries)
package.install(tseries)
packages.install(tseries)
install.packages("tseries")
library(tseries)
adf.test(df_train$sale)
model = auto.arima(df_train$sale,ic = 'aic', trace = TRUE)
install.packages("forecast")
library(forecast)
model = auto.arima(df_train$sale,ic = 'aic', trace = TRUE)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1))
)
accuracy(fit)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
accuracy(fit)
accuracy(fc,df_whole)
accuracy(fc,df_whole)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
# tsibble: tidy temporal data frames and tools
library(tsibble)
# fable (forecast table)
library(fable)
# fabletools - provides tools for building modelling packages, with a focus on time series forecasting
library(fabletools)
# Feature Extraction and Statistics for Time Series in tsibble format
library(feasts)
# tsibbledata: used datasets for example global_economy
library(tsibbledata)
data <- readr::read_csv("plastics.csv",show_col_types = FALSE)
# Convert to tsibble with index at date
data %>%
mutate(converted_date=yearmonth(date)) %>%
tsibble(index=converted_date) ->
data
head(data)
data %>% autoplot(sale)
decompose_data <- data %>%
model(classical_decomposition(sale, type = "mult"))
decompose_data %>% components() %>% autoplot()
dcmp = data%>%
model(STL(sale))
data%>%autoplot(sale)+
autolayer(components(dcmp), season_adjust, color= "blue")+
labs(x="Date",y = "Sale in thousand", title="Seasonally adjusted data")
set.seed(200)
index = sample(1:60,1)
data_o <- data
data_o$sale[index] <- data_o$sale[index] + 500
dcmp_o = data_o%>%
model(STL(sale))
data_o%>%autoplot(sale)+
autolayer(components(dcmp_o), season_adjust, color= "blue")+
labs(x="Date",y = "Sale in thousand", title="Seasonally adjusted data")
df_whole <- data
df_train <- df_whole %>% filter(converted_date < yearmonth("1999 Jan"))
df_test <- df_whole %>% filter(converted_date > yearmonth("1998 Dec"))
fit <- df_train %>%
model(
Mean = MEAN(sale),
Naive = NAIVE(sale),
Seasonal_Naive = SNAIVE(sale),
Drift = RW(sale ~ drift())
)
accuracy(fit)
accuracy(fc,df_whole)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
report(fit[1])
report(fit[2])
fc <- fit %>% forecast(h = "2 year")
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
report(fit[1])
report(fit[2])
fc <- fit %>% forecast(h = "2 years")
fit <- df_train %>%
model(
arima_auto = ARIMA((sale)),
arima = ARIMA((sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
accuracy(fit)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
# tsibble: tidy temporal data frames and tools
library(tsibble)
# fable (forecast table)
library(fable)
# fabletools - provides tools for building modelling packages, with a focus on time series forecasting
library(fabletools)
# Feature Extraction and Statistics for Time Series in tsibble format
library(feasts)
# tsibbledata: used datasets for example global_economy
library(tsibbledata)
data <- readr::read_csv("plastics.csv",show_col_types = FALSE)
# Convert to tsibble with index at date
data %>%
mutate(converted_date=yearmonth(date)) %>%
tsibble(index=converted_date) ->
data
head(data)
data %>% autoplot(sale)
decompose_data <- data %>%
model(classical_decomposition(sale, type = "mult"))
decompose_data %>% components() %>% autoplot()
dcmp = data%>%
model(STL(sale))
data%>%autoplot(sale)+
autolayer(components(dcmp), season_adjust, color= "blue")+
labs(x="Date",y = "Sale in thousand", title="Seasonally adjusted data")
set.seed(200)
index = sample(1:60,1)
data_o <- data
data_o$sale[index] <- data_o$sale[index] + 500
dcmp_o = data_o%>%
model(STL(sale))
data_o%>%autoplot(sale)+
autolayer(components(dcmp_o), season_adjust, color= "blue")+
labs(x="Date",y = "Sale in thousand", title="Seasonally adjusted data")
df_whole <- data
df_train <- df_whole %>% filter(converted_date < yearmonth("1999 Jan"))
df_test <- df_whole %>% filter(converted_date > yearmonth("1998 Dec"))
fit <- df_train %>%
model(
Mean = MEAN(sale),
Naive = NAIVE(sale),
Seasonal_Naive = SNAIVE(sale),
Drift = RW(sale ~ drift())
)
accuracy(fit)
# forecast next year (in training set)
fc <- fit %>% forecast(h = 24)
# plot forecasts and actual data
fc %>% autoplot(df_whole,level = NULL)
df_train %>% model(STL(log(sale))) %>% components() %>% autoplot()
fit <- df_train %>%
model(
ets_auto = ETS(log(sale)),
ets = ETS(log(sale) ~ error("A") + trend("A") + season("A"))
)
accuracy(fit)
report(fit)
report(fit[1])
fit <- fit %>% select(ets)
# forecast next year (in training set)
fc <- fit %>% forecast(h = "2 years")
# plot forecasts and actual data
fc %>% autoplot(df_whole,level = 90)
accuracy(fc,df_whole)
gg_tsdisplay(df_train, sale, plot_type='partial')
gg_tsdisplay(df_train, difference(sale), plot_type='partial')
df_train %>%
features(sale, unitroot_kpss)
df_train %>% features(sale, unitroot_nsdiffs)
df_train %>% features(log(sale), unitroot_nsdiffs)
df_train %>% features( difference(log(sale), lag=12), unitroot_ndiffs)
gg_tsdisplay(df_train, difference(log(sale), lag=12), plot_type='partial')
acf(df_train$sale)
pacf(df_train$sale)
library(tseries)
adf.test(df_train$sale)#data stationary as p value less than .05
library(forecast)
model = auto.arima(df_train$sale,ic = 'aic', trace = TRUE)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
accuracy(fit)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
# tsibble: tidy temporal data frames and tools
library(tsibble)
# fable (forecast table)
library(fable)
# fabletools - provides tools for building modelling packages, with a focus on time series forecasting
library(fabletools)
# Feature Extraction and Statistics for Time Series in tsibble format
library(feasts)
# tsibbledata: used datasets for example global_economy
library(tsibbledata)
data <- readr::read_csv("plastics.csv",show_col_types = FALSE)
# Convert to tsibble with index at date
data %>%
mutate(converted_date=yearmonth(date)) %>%
tsibble(index=converted_date) ->
data
head(data)
data %>% autoplot(sale)
decompose_data <- data %>%
model(classical_decomposition(sale, type = "mult"))
decompose_data %>% components() %>% autoplot()
dcmp = data%>%
model(STL(sale))
data%>%autoplot(sale)+
autolayer(components(dcmp), season_adjust, color= "blue")+
labs(x="Date",y = "Sale in thousand", title="Seasonally adjusted data")
set.seed(200)
index = sample(1:60,1)
data_o <- data
data_o$sale[index] <- data_o$sale[index] + 500
dcmp_o = data_o%>%
model(STL(sale))
data_o%>%autoplot(sale)+
autolayer(components(dcmp_o), season_adjust, color= "blue")+
labs(x="Date",y = "Sale in thousand", title="Seasonally adjusted data")
df_whole <- data
df_train <- df_whole %>% filter(converted_date < yearmonth("1999 Jan"))
df_test <- df_whole %>% filter(converted_date > yearmonth("1998 Dec"))
fit <- df_train %>%
model(
Mean = MEAN(sale),
Naive = NAIVE(sale),
Seasonal_Naive = SNAIVE(sale),
Drift = RW(sale ~ drift())
)
accuracy(fit)
# forecast next year (in training set)
fc <- fit %>% forecast(h = 24)
# plot forecasts and actual data
fc %>% autoplot(df_whole,level = NULL)
df_train %>% model(STL(log(sale))) %>% components() %>% autoplot()
fit <- df_train %>%
model(
ets_auto = ETS(log(sale)),
ets = ETS(log(sale) ~ error("A") + trend("A") + season("A"))
)
accuracy(fit)
report(fit)
report(fit[1])
fit <- fit %>% select(ets)
# forecast next year (in training set)
fc <- fit %>% forecast(h = "2 years")
# plot forecasts and actual data
fc %>% autoplot(df_whole,level = 90)
accuracy(fc,df_whole)
gg_tsdisplay(df_train, sale, plot_type='partial')
gg_tsdisplay(df_train, difference(sale), plot_type='partial')
df_train %>%
features(sale, unitroot_kpss)
df_train %>% features(sale, unitroot_nsdiffs)
df_train %>% features(log(sale), unitroot_nsdiffs)
df_train %>% features( difference(log(sale), lag=12), unitroot_ndiffs)
gg_tsdisplay(df_train, difference(log(sale), lag=12), plot_type='partial')
acf(df_train$sale)
pacf(df_train$sale)
library(tseries)
adf.test(df_train$sale)#data stationary as p value less than .05
library(forecast)
model = auto.arima(df_train$sale,ic = 'aic', trace = TRUE)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
accuracy(fit)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
# tsibble: tidy temporal data frames and tools
library(tsibble)
# fable (forecast table)
library(fable)
# fabletools - provides tools for building modelling packages, with a focus on time series forecasting
library(fabletools)
# Feature Extraction and Statistics for Time Series in tsibble format
library(feasts)
# tsibbledata: used datasets for example global_economy
library(tsibbledata)
library(cowplot)
df <- readr::read_csv("antidiabetic_drug_sales.csv",show_col_types = FALSE)
head(df)
df %>%
mutate(Month=yearmonth(Month)) %>%
tsibble(index=Month) ->
df
head(df)
# Split to train and test (whole = train + test)
df_whole <- df
df <- df %>% filter(Month < yearmonth("2005-01"))
# plot
autoplot(df,Cost)
df %>% gg_season(Cost, labels = "both") +
labs(y = "$ million", title = "Seasonal plot: antidiabetic drug sales")
df %>%
gg_subseries(Cost) +
labs(y = "$ million", title = "Subseries plot: antidiabetic drug sales")
# ACF(df, Cost) %>% autoplot()
# PACF(df, Cost) %>% autoplot()
gg_tsdisplay(df, Cost, plot_type='partial')
df %>% model(classical_decomposition(Cost, type='m')) %>% components() %>% autoplot()
df %>% model(classical_decomposition(log(Cost), type='m')) %>% components() %>% autoplot()
# Auto Box-Cox
# log if lambda is zero
df %>% features(Cost, features = guerrero)
plot_grid(
autoplot(df,Cost),
autoplot(df,box_cox(Cost,0.272)),
autoplot(df,log(Cost)),
ncol=3)
# fit
fit <- df %>%
model(
Mean = MEAN(Cost),
Naive = NAIVE(Cost),
Seasonal_Naive = SNAIVE(Cost),
Drift = RW(Cost ~ drift())
)
accuracy(fit)
installed.packages("forecast")
# fit
fit <- df %>%
model(
Mean = MEAN(Cost),
Naive = NAIVE(Cost),
Seasonal_Naive = SNAIVE(Cost),
Drift = RW(Cost ~ drift())
)
accuracy(fit)
library(forecast)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
accuracy(fit)
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
forecast(fit)
report(fit[1])
report(fit[2])
fc <- fit %>% forecast(h = "2 year")
fit <- df_train %>%
model(
arima_auto = ARIMA(log(sale)),
arima = ARIMA(log(sale)~0+pdq(5,1,1)+PDQ(1,1,0))
)
forecast(fit)
report(fit[1])
report(fit[2])
fc <- fit %>% forecast(h =2)
fc %>% autoplot(df_whole,level = 80)
# fit
fit <- df %>%
model(
Mean = MEAN(Cost),
Naive = NAIVE(Cost),
Seasonal_Naive = SNAIVE(Cost),
Drift = RW(Cost ~ drift())
)
accuracy(fit)
