ts.plot(df_ts)
#df_ts = ts(df$run_time, frequency = 12)
#ts.plot(df_ts)
#mvalue = cpt.mean(df_ts, method='BinSeg')
#cpts(mvalue)
#plot(mvalue)
knitr::opts_chunk$set(echo = TRUE)
forecast_eth <- forecast(ethereum$Close, model = arima_eth, lambda = 0,h=2)
# Importing the libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
library(forecast)
library(MASS)
library(tseries)
# Loading the dataset for Ethereum
ethereum <- read.csv("coin_Ethereum.csv",header=T)
ethereum$Date <- as.Date(ethereum$Date)
# # Loading the dataset for Dogecoin
dogecoin <- read.csv("coin_Dogecoin.csv",header=T)
dogecoin$Date <- as.Date(dogecoin$Date)
# Plotting the time series for Ethereum
plot_eth_ts <- ethereum %>%
ggplot( aes(x=Date, y=Close)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Ethereum Closing price ($)") +
theme_classic()
plot_eth_ts <- ggplotly(plot_eth_ts)
plot_eth_ts
# plotting with a LOESS line
par(mfrow = c(1, 1))
ggplot(ethereum, aes(x = Date, y = Close, group = 1)) +
geom_line() +
xlab("Date") +
ylab("USD") +
ggtitle("Closing Price of Ethereum") +
geom_smooth(method = "loess", level = 0)
# plotting with a LOESS line
par(mfrow = c(1, 1))
ggplot(dogecoin, aes(x = Date, y = Close, group = 1)) +
geom_line() +
xlab("Date") +
ylab("USD") +
ggtitle("Closing Price of Dogecoin") +
geom_smooth(method = "loess", level = 0)
# Plotting the time series for DogeCoin
plot_doge_ts <- dogecoin %>%
ggplot( aes(x=Date, y=Close)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Dogecoin Closing price ($)") +
theme_classic()
plot_doge_ts <- ggplotly(plot_doge_ts)
plot_doge_ts
close_eth <- as.ts(ethereum$Close)
close_doge <- as.ts(dogecoin$Close)
ggtsdisplay(close_eth)
ggtsdisplay(close_eth)
ggtsdisplay(close_doge)
library(BETS)
corrgram(close_eth, lag.max = 35, type = "correlation", mode = "simple",
ci = 0.95, style = "plotly", knit = F)
corrgram(close_eth, lag.max = 35, type = "partial", mode = "simple",
ci = 0.95, style = "plotly", knit = F)
corrgram(close_doge, lag.max = 35, type = "correlation", mode = "simple",
ci = 0.95, style = "plotly", knit = F)
corrgram(close_doge, lag.max = 35, type = "partial", mode = "simple",
ci = 0.95, style = "plotly", knit = F)
par(mfrow = c(1, 1))
# library(MASS) is loaded
boxcox_eth_transf <- boxcox(close_eth ~ as.numeric(1:length(close_eth)))
par(mfrow = c(1, 1))
# library(MASS) is loaded
boxcox_doge_transf <- boxcox(close_doge ~ as.numeric(1:length(close_doge)))
lambda_eth <- boxcox_eth_transf$x[which(boxcox_eth_transf$y == max(boxcox_eth_transf$y))]
lambda_eth
lambda_doge <- boxcox_doge_transf$x[which(boxcox_doge_transf$y == max(boxcox_doge_transf$y))]
lambda_doge
# transforming the data
ethereum$close_transf_eth <- log(close_eth)
# new time series plot
par(mfrow = c(1, 1))
ggplot(ethereum, aes(x = Date, y = close_transf_eth, group = 1)) +
geom_line() +
xlab("Date") +
ylab("USD (after log transformation)") +
ggtitle("Series after Box-Cox (Ethereum)") +
geom_smooth(method = "loess", level = 0)
# transforming the data
dogecoin$close_transf_doge <- log(close_doge)
# new time series plot
par(mfrow = c(1, 1))
ggplot(dogecoin, aes(x = Date, y = close_transf_doge, group = 1)) +
geom_line() +
xlab("Date") +
ylab("USD (after log transformation)") +
ggtitle("Series after Box-Cox (Dogecoin)") +
geom_smooth(method = "loess", level = 0)
var(close_eth)
var(ethereum$close_transf_eth)
var(close_doge)
var(dogecoin$close_transf_doge)
par(mfrow = c(1, 1))
diff1_eth <- diff(ethereum$close_transf_eth, lag = 1)
autoplot(diff1_eth) + ggtitle("Ethereum Time Series after Differencing at lag 1 after Box-Cox")
par(mfrow = c(1, 1))
diff1_doge <- diff(dogecoin$close_transf_doge, lag = 1)
autoplot(diff1_doge) + ggtitle("Dogecoin Time Series after Differencing at lag 1 after Box-Cox")
adf.test(diff1_eth, alternative = "stationary")
adf.test(diff1_doge, alternative = "stationary")
arima_eth <- auto.arima(close_eth, stepwise = F, approximation = F, lambda = 0, ic = "aicc")
arima_eth
accuracy(arima_eth)
arima_doge <- auto.arima(close_doge, stepwise = F, approximation = F, lambda = 0, ic = "aicc")
arima_doge
accuracy(arima_doge)
k <- round(sqrt(length(open)))
# a matrix comparing p-values for the three different tests
diag.mat <- matrix(
data = NA, nrow = 2, ncol = 3,
dimnames = list(
c("Ethereum", "Dogecoin"),
c("Ljung-Box", "McLeod-Li", "Shapiro-Wilk")
)
)
residuals_eth <- arima_eth$residuals
residuals_doge <- arima_doge$residuals
# testing Ethereum residuals
diag.mat[1, 1] <- Box.test(residuals_eth, type = "Ljung-Box", lag = k, fitdf = 0)$p.value
diag.mat[1, 2] <- Box.test(residuals_eth^2, type = "Ljung-Box", lag = k, fitdf = 0)$p.value
diag.mat[1, 3] <- shapiro.test(residuals_eth)$p.value
# testing Dogecoin residuals
diag.mat[2, 1] <- Box.test(residuals_doge, type = "Ljung-Box", lag = k, fitdf = 2)$p.value
diag.mat[2, 2] <- Box.test(residuals_doge^2, type = "Ljung-Box", lag = k, fitdf = 2)$p.value
diag.mat[2, 3] <- shapiro.test(residuals_doge)$p.value
# matrix of p-values
round(diag.mat, 3)
forecast_eth <- forecast(ethereum$Close, model = arima_eth, lambda = 0,h=2)
forecast_doge <- forecast(dogecoin$Close, model = arima_doge, lambda = 0)
plot(forecast_eth,main="Ethereum Coin Forecasting")
plot(forecast_doge,main="Dogecoin Forecasting")
knitr::opts_chunk$set(echo = TRUE)
forecast_eth <- forecast(ethereum$Close, model = arima_eth, lambda = 0)
forecast_doge <- forecast(dogecoin$Close, model = arima_doge, lambda = 0)
plot(forecast_eth,main="Ethereum Coin Forecasting")
plot(forecast_doge,main="Dogecoin Forecasting")
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.POSIXct(df$date, format = "%d/%m/%Y %H:%M")
df$date <- as.Date(df$date)
head(df)
ts.plot(df_ts)
#df_ts = ts(df$run_time, frequency = 12)
#ts.plot(df_ts)
#mvalue = cpt.mean(df_ts, method='BinSeg')
#cpts(mvalue)
#plot(mvalue)
change_value = cpt.mean(data_frame$run_time, method="PELT")
change_value = cpt.mean(df$run_time, method="PELT")
cpts(change_value)
change_value = cpt.mean(df$run_time, method="PELT")
cpts(change_value)
plot(change_value, cpt.width=3)
run_time = cpt.var(diff(df$run_time), method="PELT")
cpts(run_time)
plot(run_time, cpt.width=3)
vis_seg_data = df %>% mutate(segement = row_number()) %>% mutate(segment = ifelse(row_number() < 50, 1,
ifelse(row_number() %in% 50:66, 2,
ifelse(row_number() %in% 66:142, 3,
ifelse(row_number() %in% 142:155, 4,
ifelse(row_number() %in% 155:176, 5,
ifelse(row_number() %in% 176:226, 6,
ifelse(row_number() %in% 226:269, 7, 8))))))))
vis_seg_data
ggplot(seg_data_frame, aes(x =run_time)) + geom_histogram()+ geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x =run_time)) + geom_histogram()+ geom_density(aes(y=..count..))
ggplot(seg_data_frame, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(data.table)
library(anytime)
library(stringr)
library(tsibble)
library(changepoint)
hist_plot <- plot_ly(df,x=~run_time, type = "histogram")
hist_plot
ggplot(seg_data_frame, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
vis_seg_data = df %>% mutate(segement = row_number()) %>% mutate(seg = ifelse(row_number() < 50, 1,
ifelse(row_number() %in% 50:66, 2,
ifelse(row_number() %in% 66:142, 3,
ifelse(row_number() %in% 142:155, 4,
ifelse(row_number() %in% 155:176, 5,
ifelse(row_number() %in% 176:226, 6,
ifelse(row_number() %in% 226:269, 7, 8))))))))
vis_seg_data
ggplot(vis_seg_data, aes(x =run_time)) + geom_histogram()+ geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
qqnorm(data_frame$run_time)
qqnorm(df$run_time)
qqline(df$run_time)
set.seed(15)
mvrun_time.pelt=cpt.meanvar(df$run_time,test.stat='Normal',method='BinSeg',penalty="S
IC")
set.seed(15)
mvrun_time.pelt=cpt.meanvar(df$run_time,test.stat='Normal',method='BinSeg',penalty="SIC")
set.seed(15)
mvrun_time.pelt=cpt.meanvar(df$run_time,test.stat='Normal',method='BinSeg',penalty="SIC")
cpts(mvrun_time.pelt)
param.est(mvrun_time.pelt)
pen.value(mvrun_time.pelt)
plot(mvrun_time.pelt, cpt.width=3, cpt.col='Red')
plot(mvrun_time_crops,ncpts=21,cpt.width=3,cpt.col='Red')
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.POSIXct(df$date, format = "%d/%m/%Y %H:%M")
df$date <- as.Date(df$date)
df_ts = ts(df$run_time, frequency = 12)
ts.plot(df_ts)
# changepoint analysis using mean
mvalue = cpt.mean(as.vector(scale(df_ts)), method='PELT')
cpts(mvalue)
plot(mvalue)
summary(mvalue)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.POSIXct(df$date, format = "%d/%m/%Y %H:%M")
df$date <- as.Date(df$date)
df_ts = ts(df$run_time, frequency = 12)
ts.plot(df_ts)
# changepoint analysis using mean
mvalue = cpt.mean(as.vector(scale(df_ts)), method='PELT')
cpts(mvalue)
plot(mvalue)
summary(mvalue)
# changepoint analysis using variance
vnvalue = cpt.var(diff(as.vector(scale(df_ts))), method='PELT')
cpts(vnvalue)
plot(vnvalue)
summary(vnvalue)
#df_ts = ts(df$run_time, frequency = 12)
#ts.plot(df_ts)
#mvalue = cpt.mean(df_ts, method='BinSeg')
#cpts(mvalue)
#plot(mvalue)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.Date(df$date, "%m/%d/%Y")
# Creating time series object
df_ts = ts(df$run_time, frequency = 12)
ts.plot(df_ts)
# changepoint analysis using mean
mvalue = cpt.mean(as.vector(scale(df_ts)), method='PELT')
cpts(mvalue)
plot(mvalue)
summary(mvalue)
# changepoint analysis using variance
vnvalue = cpt.var(diff(as.vector(scale(df_ts))), method='PELT')
cpts(vnvalue)
plot(vnvalue)
summary(vnvalue)
df = df %>% mutate(segment = row_number()) %>% mutate(seg =
ifelse(row_number() < 6, 1,
ifelse(row_number() %in% 6:7, 2,
ifelse(row_number() %in% 7:66, 3,
ifelse(row_number() %in% 66:176, 4, 5)))))
ggplot(df, aes(x=run_time)) + geom_histogram()
ggplot(df, aes(x=seg)) + geom_histogram()
set.seed(15)
df_mv = cpt.meanvar(df$run_time, test.stat='Normal', method='PELT',penalty = 'SIC')
cpts(df_mv)
pen.value(df_mv)
plot(df_mv)
df_mv_crops = cpt.meanvar(df$run_time, method="PELT", penalty="CROPS",
pen.value=c(0, pen.value(df_mv)))
plot(df_mv_crops, diagnostic=TRUE)
plot(df_mv_crops,ncpts=21)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.POSIXct(df$date, format = "%d/%m/%Y %H:%M")
df$date <- as.Date(df$date)
df_ts = ts(df$run_time, frequency = 12)
ts.plot(df_ts)
# changepoint analysis using mean
mvalue = cpt.mean(as.vector(scale(df_ts)), method='PELT')
cpts(mvalue)
plot(mvalue)
summary(mvalue)
# changepoint analysis using variance
vnvalue = cpt.var(diff(as.vector(scale(df_ts))), method='PELT')
cpts(vnvalue)
plot(vnvalue)
summary(vnvalue)
vis_seg_data = df %>% mutate(segement = row_number()) %>% mutate(seg = ifelse(row_number() < 6, 1,
ifelse(row_number() %in% 6:7, 2,
ifelse(row_number() %in% 7:66, 3,
ifelse(row_number() %in% 66:176, 4,
5)))))
vis_seg_data
ggplot(vis_seg_data, aes(x =run_time)) + geom_histogram()+ geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
set.seed(15)
df_mv = cpt.meanvar(df$run_time, test.stat='Normal', method='PELT',penalty = 'SIC')
cpts(df_mv)
pen.value(df_mv)
plot(df_mv)
df_mv_crops = cpt.meanvar(df$run_time, method="PELT", penalty="CROPS",
pen.value=c(0, pen.value(df_mv)))
plot(df_mv_crops, diagnostic=TRUE)
plot(df_mv_crops,ncpts=21)
#ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x=seg)) + geom_histogram()
hist_plot <- plot_ly(vis_seg_data,x=~segment, type = "histogram")
hist_plot
vis_seg_data = UB_hpc %>% mutate(segement = row_number()) %>% mutate(segment = ifelse(row_number() < 50, 1,
ifelse(row_number() %in% 50:66, 2,
ifelse(row_number() %in% 66:142, 3,
ifelse(row_number() %in% 142:155, 4,
ifelse(row_number() %in% 155:176, 5,
ifelse(row_number() %in% 176:226, 6,
ifelse(row_number() %in% 226:269, 7, 8))))))))
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(data.table)
library(anytime)
library(stringr)
library(tsibble)
library(changepoint)
#setwd('C:\\Users\\vpara\\Downloads')
UB_hpc <- read.csv("UBHPC_8cores_NWChem_Wall_Clock_Time.csv")
head(UB_hpc)
View(UB_hpc)
UB_hpc$date<-as.Date(UB_hpc$date, "%m/%d/%Y")
UB_hpc
UB_hpc.ts <- ggplot(UB_hpc, aes(date, run_time)) +
geom_line()
UB_hpc.ts
mvalue = cpt.mean(UB_hpc$run_time, method="PELT")
cpts(mvalue)
plot(mvalue)
vrun_time = cpt.var(diff(UB_hpc$run_time), method="PELT")
cpts(vrun_time)
plot(vrun_time)
vis_seg_data = UB_hpc %>% mutate(segement = row_number()) %>% mutate(segment = ifelse(row_number() < 50, 1,
ifelse(row_number() %in% 50:66, 2,
ifelse(row_number() %in% 66:142, 3,
ifelse(row_number() %in% 142:155, 4,
ifelse(row_number() %in% 155:176, 5,
ifelse(row_number() %in% 176:226, 6,
ifelse(row_number() %in% 226:269, 7, 8))))))))
vis_seg_data
hist_plot <- plot_ly(UB_hpc,x=~run_time, type = "histogram")
hist_plot
hist_plot <- plot_ly(vis_seg_data,x=~segment, type = "histogram")
hist_plot
set.seed(15)
mvrun_time.pelt=cpt.meanvar(UB_hpc$run_time,
test.stat='Normal',
method='BinSeg',
penalty="SIC")
cpts(mvrun_time.pelt)
param.est(mvrun_time.pelt)
pen.value(mvrun_time.pelt)
plot(mvrun_time.pelt, cpt.width=3, cpt.col='blue')
mvrun_time_crops = cpt.meanvar(UB_hpc$run_time, method="PELT", penalty="CROPS",
pen.value=c(0, pen.value(mvrun_time.pelt)))
cpts.full(mvrun_time_crops)
pen.value.full(mvrun_time_crops)
plot(mvrun_time_crops, diagnostic=TRUE)
plot(mvrun_time_crops,ncpts=21)
ggplot(vis_seg_data, aes(x=seg))+geom_histogram()+geom_density(aes(y=..count..))
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.POSIXct(df$date, format = "%d/%m/%Y %H:%M")
df$date <- as.Date(df$date)
df_ts = ts(df$run_time, frequency = 12)
ts.plot(df_ts)
# changepoint analysis using mean
mvalue = cpt.mean(as.vector(scale(df_ts)), method='PELT')
cpts(mvalue)
plot(mvalue)
summary(mvalue)
# changepoint analysis using variance
vnvalue = cpt.var(diff(as.vector(scale(df_ts))), method='PELT')
cpts(vnvalue)
plot(vnvalue)
summary(vnvalue)
vis_seg_data = df %>% mutate(segement = row_number()) %>% mutate(seg = ifelse(row_number() < 6, 1,
ifelse(row_number() %in% 6:7, 2,
ifelse(row_number() %in% 7:66, 3,
ifelse(row_number() %in% 66:176, 4,
5)))))
vis_seg_data
ggplot(vis_seg_data, aes(x =run_time)) + geom_histogram()+ geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x=seg))+geom_histogram()+geom_density(aes(y=..count..))
#ggplot(vis_seg_data, aes(x=seg)) + geom_histogram()
ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=30)+geom_density(aes(y=..count..))
#ggplot(vis_seg_data, aes(x=seg)) + geom_histogram()
ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
#ggplot(vis_seg_data, aes(x=seg)) + geom_histogram()
set.seed(15)
df_mv = cpt.meanvar(df$run_time, test.stat='Normal', method='PELT',penalty = 'SIC')
cpts(df_mv)
pen.value(df_mv)
plot(df_mv)
df_mv_crops = cpt.meanvar(df$run_time, method="PELT", penalty="CROPS",
pen.value=c(0, pen.value(df_mv)))
plot(df_mv_crops, diagnostic=TRUE)
plot(df_mv_crops,ncpts=21)
set.seed(49)
df_mv = cpt.meanvar(dfts$run_time, test.stat='Normal', method='PELT',penalty = 'SIC')
set.seed(49)
df_mv = cpt.meanvar(df$run_time, test.stat='Normal', method='PELT',penalty = 'SIC')
cpts(df_mv)
pen.value(df_mv)
plot(df_mv)
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(changepoint)
df <- read.csv('UBHPC_8cores_NWChem_Wall_Clock_Time.csv')
df$date <- as.POSIXct(df$date, format = "%d/%m/%Y %H:%M")
df$date <- as.Date(df$date)
dfts = ts(df$run_time, frequency = 12)
ts.plot(dfts)
#mean changepoint analysis
mvalue = cpt.mean(as.vector(scale(dfts)), method='PELT')
cpts(mvalue)
plot(mvalue)
summary(mvalue)
# variance changepoint analysis
vnvalue = cpt.var(diff(as.vector(scale(dfts))), method='PELT')
cpts(vnvalue)
plot(vnvalue)
summary(vnvalue)
vis_seg_data = df %>% mutate(segement = row_number()) %>% mutate(seg = ifelse(row_number() < 6, 1,
ifelse(row_number() %in% 6:7, 2,
ifelse(row_number() %in% 7:66, 3,
ifelse(row_number() %in% 66:176, 4,
5)))))
vis_seg_data
ggplot(vis_seg_data, aes(x =run_time)) + geom_histogram()+ geom_density(aes(y=..count..))
ggplot(vis_seg_data, aes(x=seg))+geom_histogram(binwidth=1)+geom_density(aes(y=..count..))
set.seed(49)
df_meanvar = cpt.meanvar(df$run_time, test.stat='Normal', method='PELT',penalty = 'SIC')
cpts(df_meanvar)
pen.value(df_meanvar)
plot(df_meanvar)
df_meanvar_crops = cpt.meanvar(df$run_time, method="PELT", penalty="CROPS",
pen.value=c(0, pen.value(df_mv)))
plot(df_meanvar_crops, diagnostic=TRUE)
plot(df_meanvar_crops,ncpts=21)
